{"version":3,"sources":["layout/Loading.js","App.js","serviceWorker.js","index.js"],"names":["Loading","_ref","color","react_default","a","createElement","className","Spinner","App","state","quotes","random","API","colors","active","randomQuoteGenerator","randomID","Math","floor","length","randomquote","Object","toConsumableArray","filter","quote","id","_this","setState","handleNewQuote","handleActiveColor","_this$state","prevState","_this2","this","fetch","then","response","json","catch","err","console","log","_this$state2","_this$state2$random","author","activeColor","renderQuote","key","Fade","in","tag","concat","href","encodeURIComponent","onClick","style","minHeight","layout_Loading","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ceb00c12.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Spinner } from 'reactstrap';\r\n\r\nfunction Loading({ color }) {\r\n  return (\r\n    <div className=\"d-flex justify-content-center align-items-center h-100 w-100\">\r\n      <Spinner color={color} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loading;","import React, { Component } from 'react';\nimport './App.css';\nimport Loading from './layout/Loading';\nimport { Fade } from 'reactstrap'\n\nclass App extends Component {\n  state = {\n    quotes: [],\n    random: {},\n    API: \"https://gist.githubusercontent.com/hasibweb/68e359a2e63d071fbd893596391b9ddd/raw/c34d04ef3e0d6283d90b311a768c39a12cf2ac64/quotes.json\",\n    colors: ['primary', 'secondary', 'success', 'danger', 'info', 'dark'],\n    active: 2\n  }\n\n  // Component Did Mount\n  componentDidMount() {\n    fetch(this.state.API)\n      .then(response => response.json())\n      .then((quotes) => {\n        // All Quotes\n        this.setState({ quotes });\n\n        // Random Quote\n        this.randomQuoteGenerator(quotes);\n      })\n      .catch(err => console.log(err));\n  }\n\n  // Random Quote Generator\n  randomQuoteGenerator = (quotes) => {\n    const randomID = Math.floor(Math.random() * quotes.length);\n    if (randomID) {\n      const randomquote = [...quotes.filter(quote => quote.id === randomID)][0];\n      this.setState({ random: randomquote })\n    }\n  }\n\n  // New Quote\n  handleNewQuote = () => {\n    this.randomQuoteGenerator(this.state.quotes);\n    this.handleActiveColor();\n  }\n\n  // handle Active Color\n  handleActiveColor = () => {\n    const { colors, active } = this.state;\n\n    if (active === (colors.length - 1)) this.setState({ active: 0 })\n    else this.setState(prevState => ({ active: prevState.active + 1 }))\n  }\n\n  render() {\n    const { quotes, random: { id, quote, author }, colors, active } = this.state;\n    const activeColor = colors[active];\n    // Render Quote\n    const renderQuote = (\n      <div key={id} className=\"\" id=\"quote-box\">\n        <Fade in={true} tag=\"div\">\n          <p id=\"text\" className={`font-weight-bold font-italic text-center lead text-${activeColor}`}>\n            <i className=\"fas fa-quote-left\"></i> {quote} <i className=\"fas fa-quote-right\"></i></p>\n          <h5 id=\"author\" className={`text-right mb-4 text-${activeColor}`}>-{author}</h5>\n        </Fade>\n        <div className=\"social-icons float-left mt-2\">\n          <a\n            id=\"tweet-quote\"\n            className={`py-2 px-3 bg-${activeColor} text-white mr-1`}\n            href={`https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=${\n              encodeURIComponent('\"' + quote + '\" ' + author)}`\n            }>\n            <i className=\"fab fa-1x fa-twitter\"></i>\n          </a>\n        </div>\n        <button id=\"new-quote\" className={`btn btn-${activeColor} float-right`} onClick={this.handleNewQuote}>New Quote</button>\n      </div>\n    );\n\n    return (\n      <div className={`App bg-${activeColor}`}>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-6 mx-auto mt-5 jumbotron\" style={{ minHeight: '200px' }}>\n              {quotes.length ? renderQuote : <Loading color={activeColor} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}